declare i32 @printf(i8*, ...)
declare void @exit(i32)
@.int_specifier = constant [4 x i8] c"%d\0A\00"
@.str_specifier = constant [4 x i8] c"%s\0A\00"
@.divide_by_zero_error = constant [23 x i8] c"Error division by zero\00"

define void @printi(i32) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i32 %0)
    ret void
}

define void @print(i8*) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i8* %0)
    ret void
}


define void @divByZero() {
    %spec_ptr = getelementptr [23 x i8], [23 x i8]* @.divide_by_zero_error, i32 0, i32 0
    call void (i8*) @print(i8* %spec_ptr)
    %exitCode = add i32 0, 0
    call void @exit(i32 %exitCode)
    ret void
}

define void @var0maxTestscheckBasicArithmetics()
{
    %myArr_0 = alloca [50 x i32]
    %var1 = add i32 3, 0
    %var2 = add i32 5, 0
    %var3 = add i32 2, 0
    %var4 = mul i32 %var2, %var3
    %var5 = add i32 %var1, %var4
    %var6 = add i32 3, 0
    %var7 = add i32 %var5, %var6
    %var8 = getelementptr [50 x i32], [50 x i32]* %myArr_0, i32 0, i32 0
    store i32 %var7, i32* %var8
    %var9 = getelementptr [50 x i32], [50 x i32]* %myArr_0, i32 0, i32 0
    %var10 = load i32, i32* %var9
    call void @printi(i32 %var10)
    %var11 = add i32 3, 0
    %var12 = add i32 77, 0
    %var13 = add i32 %var11, %var12
    %var14 = add i32 44, 0
    %var15 = sub i32 %var13, %var14
    %var16 = getelementptr [50 x i32], [50 x i32]* %myArr_0, i32 0, i32 0
    store i32 %var15, i32* %var16
    %var17 = getelementptr [50 x i32], [50 x i32]* %myArr_0, i32 0, i32 0
    %var18 = load i32, i32* %var17
    call void @printi(i32 %var18)
    %var19 = add i32 32, 0
    %var20 = add i32 2, 0
    %var22 = icmp eq i32 %var20, 0
    br i1 %var22, label %label_51, label %label_54
    label_51:
        call void @divByZero()
        br label %label_54
    label_54:
        %var21 = sdiv i32 %var19, %var20
        %var23 = add i32 5, 0
        %var24 = add i32 3, 0
        %var25 = mul i32 %var23, %var24
        %var26 = add i32 %var21, %var25
        %var27 = getelementptr [50 x i32], [50 x i32]* %myArr_0, i32 0, i32 0
        store i32 %var26, i32* %var27
        %var28 = getelementptr [50 x i32], [50 x i32]* %myArr_0, i32 0, i32 0
        %var29 = load i32, i32* %var28
        call void @printi(i32 %var29)
        ret void
}

define void @main()
{
    %myArr_1 = alloca [50 x i32]
        call void @var0maxTestscheckBasicArithmetics()
        ret void
}

