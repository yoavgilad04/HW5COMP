declare i32 @printf(i8*, ...)
declare void @exit(i32)
@.int_specifier = constant [4 x i8] c"%d\0A\00"
@.str_specifier = constant [4 x i8] c"%s\0A\00"
@.divide_by_zero_error = constant [23 x i8] c"Error division by zero\00"
@.var4 = constant [36 x i8] c"Finished the emptyReturn recursion.\00"
@.var27 = constant [38 x i8] c"Lets start with emptyReturn function:\00"
@.var32 = constant [43 x i8] c"And now we will finish with the intReturn:\00"

define void @printi(i32) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i32 %0)
    ret void
}

define void @print(i8*) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i8* %0)
    ret void
}


define void @divByZero() {
    %spec_ptr = getelementptr [23 x i8], [23 x i8]* @.divide_by_zero_error, i32 0, i32 0
    call void (i8*) @print(i8* %spec_ptr)
    %exitCode = add i32 0, 0
    call void @exit(i32 %exitCode)
    ret void
}

define void @var0emptyReturn(i32)
{
    %myArr_0 = alloca [50 x i32]
    %var1 = add i32 %0, 0
    %var2 = add i32 0, 0
    %var3 = icmp eq i32 %var1, %var2
    br i1 %var3, label %label_29, label %label_34
    label_29:
        %var5 = getelementptr [36 x i8] , [36 x i8]* @.var4, i32 0, i32 0
        call void (i8*) @print(i8* %var5)
        ret void
        br label %label_34
    label_34:
        %var6 = add i32 %0, 0
        call void @printi(i32 %var6)
        %var7 = add i32 %0, 0
        %var8 = add i32 1, 0
        %var9 = sub i32 %var7, %var8
        call void @var0emptyReturn(i32 %var9)
        ret void
}

define i32 @var11intReturn(i32)
{
    %myArr_1 = alloca [50 x i32]
        %var12 = add i32 %0, 0
        %var13 = add i32 0, 0
        %var14 = icmp eq i32 %var12, %var13
        br i1 %var14, label %label_51, label %label_55
    label_51:
        %var15 = add i32 %0, 0
        ret i32 %var15
        br label %label_55
    label_55:
        %var16 = add i32 %0, 0
        %var17 = add i32 %0, 0
        %var18 = add i32 1, 0
        %var19 = sub i32 %var17, %var18
        %var20 = call i32 @var11intReturn(i32 %var19)
        %var21 = add i32 %var16, %var20
        %var22 = getelementptr [50 x i32], [50 x i32]* %myArr_1, i32 0, i32 0
        store i32 %var21, i32* %var22
        %var23 = getelementptr [50 x i32], [50 x i32]* %myArr_1, i32 0, i32 0
        %var24 = load i32, i32* %var23
        ret i32 %var24
        ret i32 0
}

define void @main()
{
    %myArr_2 = alloca [50 x i32]
        %var25 = add i32 10, 0
        %var26 = getelementptr [50 x i32], [50 x i32]* %myArr_2, i32 0, i32 0
        store i32 %var25, i32* %var26
        %var28 = getelementptr [38 x i8] , [38 x i8]* @.var27, i32 0, i32 0
        call void (i8*) @print(i8* %var28)
        %var29 = getelementptr [50 x i32], [50 x i32]* %myArr_2, i32 0, i32 0
        %var30 = load i32, i32* %var29
        call void @var0emptyReturn(i32 %var30)
        %var33 = getelementptr [43 x i8] , [43 x i8]* @.var32, i32 0, i32 0
        call void (i8*) @print(i8* %var33)
        %var34 = getelementptr [50 x i32], [50 x i32]* %myArr_2, i32 0, i32 0
        %var35 = load i32, i32* %var34
        %var36 = call i32 @var11intReturn(i32 %var35)
        %var37 = getelementptr [50 x i32], [50 x i32]* %myArr_2, i32 0, i32 1
        store i32 %var36, i32* %var37
        %var38 = getelementptr [50 x i32], [50 x i32]* %myArr_2, i32 0, i32 1
        %var39 = load i32, i32* %var38
        call void @printi(i32 %var39)
        ret void
}

