declare i32 @printf(i8*, ...)
declare void @exit(i32)
@.int_specifier = constant [4 x i8] c"%d\0A\00"
@.str_specifier = constant [4 x i8] c"%s\0A\00"
@.divide_by_zero_error = constant [23 x i8] c"Error division by zero\00"

define void @printi(i32) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i32 %0)
    ret void
}

define void @print(i8*) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i8* %0)
    ret void
}


define void @divByZero() {
    %spec_ptr = getelementptr [23 x i8], [23 x i8]* @.divide_by_zero_error, i32 0, i32 0
    call void (i8*) @print(i8* %spec_ptr)
    %exitCode = add i32 0, 0
    call void @exit(i32 %exitCode)
    ret void
}

define void @var0testRecursion(i32)
{
    %myArr_0 = alloca [50 x i32]
    %var1 = add i32 %0, 0
    %var2 = add i32 10, 0
    %var3 = icmp sge i32 %var1, %var2
    br i1 %var3, label %label_29, label %label_32
    label_29:
        ret void
        br label %label_32
    label_32:
        %var4 = add i32 %0, 0
        call void @printi(i32 %var4)
        %var5 = add i32 %0, 0
        %var6 = add i32 1, 0
        %var7 = add i32 %var5, %var6
        call void @var0testRecursion(i32 %var7)
        ret void
}

define void @var9maxTestsTestRecursion()
{
    %myArr_1 = alloca [50 x i32]
        %var10 = add i32 0, 0
        call void @var0testRecursion(i32 %var10)
        ret void
}

define void @main()
{
    %myArr_2 = alloca [50 x i32]
        call void @var9maxTestsTestRecursion()
        ret void
}

