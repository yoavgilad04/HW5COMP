declare i32 @printf(i8*, ...)
declare void @exit(i32)
@.int_specifier = constant [4 x i8] c"%d\0A\00"
@.str_specifier = constant [4 x i8] c"%s\0A\00"
@.divide_by_zero_error = constant [23 x i8] c"Error division by zero\00"
@.var1 = constant [121 x i8] c"If you believe it will work out, you'll see opportunities. If you believe it won't, you will see obstacles. - Wayne Dyer\00"

define void @printi(i32) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i32 %0)
    ret void
}

define void @print(i8*) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i8* %0)
    ret void
}


define void @divByZero() {
    %spec_ptr = getelementptr [23 x i8], [23 x i8]* @.divide_by_zero_error, i32 0, i32 0
    call void (i8*) @print(i8* %spec_ptr)
    %exitCode = add i32 0, 0
    call void @exit(i32 %exitCode)
    ret void
}

define void @var0Func(i32, i32)
{
    %myArr_0 = alloca [50 x i32]
    %var2 = getelementptr [121 x i8] , [121 x i8]* @.var1, i32 0, i32 0
    call void (i8*) @print(i8* %var2)
    ret void
}

define void @var3maxTestsTestPassRelopToFunc()
{
    %myArr_1 = alloca [50 x i32]
    %var4 = add i32 1, 0
    %var5 = add i32 2, 0
    %var6 = icmp slt i32 %var4, %var5
    br i1 %var6, label %label_37, label %label_39
    label_37:
        br label %label_41
    label_39:
        br label %label_41
    label_41:
        %var7 = phi i32 [1, %label_37], [0, %label_39]
        %var8 = add i32 3, 0
        %var9 = add i32 4, 0
        %var10 = icmp slt i32 %var8, %var9
        br i1 %var10, label %label_47, label %label_49
    label_47:
        br label %label_51
    label_49:
        br label %label_51
    label_51:
        %var11 = phi i32 [1, %label_47], [0, %label_49]
        call void @var0Func(i32 %var7, i32 %var11)
        ret void
}

define void @main()
{
    %myArr_2 = alloca [50 x i32]
        call void @var3maxTestsTestPassRelopToFunc()
        ret void
}

