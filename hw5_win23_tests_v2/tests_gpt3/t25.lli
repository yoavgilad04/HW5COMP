declare i32 @printf(i8*, ...)
declare void @exit(i32)
@.int_specifier = constant [4 x i8] c"%d\0A\00"
@.str_specifier = constant [4 x i8] c"%s\0A\00"
@.divide_by_zero_error = constant [23 x i8] c"Error division by zero\00"
@.var3 = constant [27 x i8] c"Printing number from 0 to \00"
@.var20 = constant [15 x i8] c"Printing done!\00"
@.var26 = constant [48 x i8] c"Byte test - testing addition and multiplication\00"

define void @printi(i32) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i32 %0)
    ret void
}

define void @print(i8*) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i8* %0)
    ret void
}


define void @divByZero() {
    %spec_ptr = getelementptr [23 x i8], [23 x i8]* @.divide_by_zero_error, i32 0, i32 0
    call void (i8*) @print(i8* %spec_ptr)
    %exitCode = add i32 0, 0
    call void @exit(i32 %exitCode)
    ret void
}

define void @var0printer(i32)
{
    %myArr_0 = alloca [50 x i32]
    %var1 = add i32 %0, 0
    %var2 = getelementptr [50 x i32], [50 x i32]* %myArr_0, i32 0, i32 0
    store i32 %var1, i32* %var2
    %var4 = getelementptr [27 x i8] , [27 x i8]* @.var3, i32 0, i32 0
    call void (i8*) @print(i8* %var4)
    %var5 = getelementptr [50 x i32], [50 x i32]* %myArr_0, i32 0, i32 0
    %var6 = load i32, i32* %var5
    call void @printi(i32 %var6)
    br label %label_34
    label_34:
        %var7 = getelementptr [50 x i32], [50 x i32]* %myArr_0, i32 0, i32 0
        %var8 = load i32, i32* %var7
        %var9 = add i32 0, 0
        %var10 = icmp sge i32 %var8, %var9
        br i1 %var10, label %label_40, label %label_55
    label_40:
        %var11 = getelementptr [50 x i32], [50 x i32]* %myArr_0, i32 0, i32 1
        store i32 0, i32* %var11
        %var12 = getelementptr [50 x i32], [50 x i32]* %myArr_0, i32 0, i32 2
        store i32 0, i32* %var12
        %var13 = getelementptr [50 x i32], [50 x i32]* %myArr_0, i32 0, i32 0
        %var14 = load i32, i32* %var13
        call void @printi(i32 %var14)
        %var15 = getelementptr [50 x i32], [50 x i32]* %myArr_0, i32 0, i32 0
        %var16 = load i32, i32* %var15
        %var17 = add i32 1, 0
        %var18 = sub i32 %var16, %var17
        %var19 = getelementptr [50 x i32], [50 x i32]* %myArr_0, i32 0, i32 0
        store i32 %var18, i32* %var19
        br label %label_34
    label_55:
        %var21 = getelementptr [15 x i8] , [15 x i8]* @.var20, i32 0, i32 0
        call void (i8*) @print(i8* %var21)
        ret void
}

define void @main()
{
    %myArr_1 = alloca [50 x i32]
        %var22 = add i32 5, 0
        call void @var0printer(i32 %var22)
        %var24 = add i32 10, 0
        call void @var0printer(i32 %var24)
        %var27 = getelementptr [48 x i8] , [48 x i8]* @.var26, i32 0, i32 0
        call void (i8*) @print(i8* %var27)
        %var28 = add i32 150, 0
        %var29 = add i32 150, 0
        %var30 = trunc i32 %var28 to i8
        %var31 = trunc i32 %var29 to i8
        %var32 = add i8 %var30, %var31
        %var33 = zext i8 %var32 to i32
        %var34 = getelementptr [50 x i32], [50 x i32]* %myArr_1, i32 0, i32 0
        store i32 %var33, i32* %var34
        %var35 = getelementptr [50 x i32], [50 x i32]* %myArr_1, i32 0, i32 0
        %var36 = load i32, i32* %var35
        call void @printi(i32 %var36)
        %var37 = add i32 130, 0
        %var38 = add i32 2, 0
        %var39 = trunc i32 %var37 to i8
        %var40 = trunc i32 %var38 to i8
        %var41 = mul i8 %var39, %var40
        %var42 = zext i8 %var41 to i32
        %var43 = getelementptr [50 x i32], [50 x i32]* %myArr_1, i32 0, i32 0
        store i32 %var42, i32* %var43
        %var44 = getelementptr [50 x i32], [50 x i32]* %myArr_1, i32 0, i32 0
        %var45 = load i32, i32* %var44
        call void @printi(i32 %var45)
        ret void
}

