declare i32 @printf(i8*, ...)
declare void @exit(i32)
@.int_specifier = constant [4 x i8] c"%d\0A\00"
@.str_specifier = constant [4 x i8] c"%s\0A\00"
@.divide_by_zero_error = constant [23 x i8] c"Error division by zero\00"
@.var9 = constant [11 x i8] c"I'm func 4\00"
@.var11 = constant [14 x i8] c"calling test1\00"
@.var17 = constant [21 x i8] c"calling inline test1\00"
@.var20 = constant [21 x i8] c"calling test2 with 1\00"
@.var27 = constant [25 x i8] c"calling test3 with var 2\00"
@.var34 = constant [14 x i8] c"calling test4\00"

define void @printi(i32) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i32 %0)
    ret void
}

define void @print(i8*) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i8* %0)
    ret void
}


define void @divByZero() {
    %spec_ptr = getelementptr [23 x i8], [23 x i8]* @.divide_by_zero_error, i32 0, i32 0
    call void (i8*) @print(i8* %spec_ptr)
    %exitCode = add i32 0, 0
    call void @exit(i32 %exitCode)
    ret void
}

define i32 @var0test1()
{
    %myArr_0 = alloca [50 x i32]
    %var1 = add i32 22, 0
    ret i32 %var1
    ret i32 0
}

define i32 @var2test2(i32)
{
    %myArr_1 = alloca [50 x i32]
    %var3 = add i32 22, 0
    %var4 = add i32 %0, 0
    %var5 = add i32 %var3, %var4
    ret i32 %var5
    ret i32 0
}

define void @var6test3(i32)
{
    %myArr_2 = alloca [50 x i32]
    %var7 = add i32 %0, 0
    call void @printi(i32 %var7)
    ret void
    ret void
}

define void @var8test4()
{
    %myArr_3 = alloca [50 x i32]
    %var10 = getelementptr [11 x i8] , [11 x i8]* @.var9, i32 0, i32 0
    call void (i8*) @print(i8* %var10)
    ret void
    ret void
}

define void @main()
{
    %myArr_4 = alloca [50 x i32]
    %var12 = getelementptr [14 x i8] , [14 x i8]* @.var11, i32 0, i32 0
    call void (i8*) @print(i8* %var12)
    %var13 = call i32 @var0test1()
    %var14 = getelementptr [50 x i32], [50 x i32]* %myArr_4, i32 0, i32 0
    store i32 %var13, i32* %var14
    %var15 = getelementptr [50 x i32], [50 x i32]* %myArr_4, i32 0, i32 0
    %var16 = load i32, i32* %var15
    call void @printi(i32 %var16)
    %var18 = getelementptr [21 x i8] , [21 x i8]* @.var17, i32 0, i32 0
    call void (i8*) @print(i8* %var18)
    %var19 = call i32 @var0test1()
    call void @printi(i32 %var19)
    %var21 = getelementptr [21 x i8] , [21 x i8]* @.var20, i32 0, i32 0
    call void (i8*) @print(i8* %var21)
    %var22 = add i32 1, 0
    %var23 = call i32 @var2test2(i32 %var22)
    %var24 = getelementptr [50 x i32], [50 x i32]* %myArr_4, i32 0, i32 0
    store i32 %var23, i32* %var24
    %var25 = getelementptr [50 x i32], [50 x i32]* %myArr_4, i32 0, i32 0
    %var26 = load i32, i32* %var25
    call void @printi(i32 %var26)
    %var28 = getelementptr [25 x i8] , [25 x i8]* @.var27, i32 0, i32 0
    call void (i8*) @print(i8* %var28)
    %var29 = add i32 2, 0
    %var30 = getelementptr [50 x i32], [50 x i32]* %myArr_4, i32 0, i32 1
    store i32 %var29, i32* %var30
    %var31 = getelementptr [50 x i32], [50 x i32]* %myArr_4, i32 0, i32 1
    %var32 = load i32, i32* %var31
    call void @var6test3(i32 %var32)
    %var35 = getelementptr [14 x i8] , [14 x i8]* @.var34, i32 0, i32 0
    call void (i8*) @print(i8* %var35)
    call void @var8test4()
    ret void
    ret void
}

