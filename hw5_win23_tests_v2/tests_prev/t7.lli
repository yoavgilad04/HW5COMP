declare i32 @printf(i8*, ...)
declare void @exit(i32)
@.int_specifier = constant [4 x i8] c"%d\0A\00"
@.str_specifier = constant [4 x i8] c"%s\0A\00"
@.divide_by_zero_error = constant [23 x i8] c"Error division by zero\00"

define void @printi(i32) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i32 %0)
    ret void
}

define void @print(i8*) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i8* %0)
    ret void
}


define void @divByZero() {
    %spec_ptr = getelementptr [23 x i8], [23 x i8]* @.divide_by_zero_error, i32 0, i32 0
    call void (i8*) @print(i8* %spec_ptr)
    %exitCode = add i32 0, 0
    call void @exit(i32 %exitCode)
    ret void
}

define i32 @var0foo()
{
    %myArr_0 = alloca [50 x i32]
    %var1 = add i32 2, 0
    ret i32 %var1
    ret i32 0
}

define void @main()
{
    %myArr_1 = alloca [50 x i32]
    %var2 = add i32 100, 0
    %var3 = call i32 @var0foo()
    %var4 = call i32 @var0foo()
    %var5 = trunc i32 %var3 to i8
    %var6 = trunc i32 %var4 to i8
    %var7 = sub i8 %var5, %var6
    %var8 = zext i8 %var7 to i32
    %var9 = trunc i32 %var2 to i8
    %var10 = trunc i32 %var8 to i8
    %var12 = icmp eq i8 %var10, 0
    br i1 %var12, label %label_44, label %label_47
    label_44:
        call void @divByZero()
        br label %label_47
    label_47:
        %var11 = udiv i8 %var9, %var10
        %var13 = zext i8 %var11 to i32
        call void @printi(i32 %var13)
        ret void
}

