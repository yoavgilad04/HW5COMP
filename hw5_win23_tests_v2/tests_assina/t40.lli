declare i32 @printf(i8*, ...)
declare void @exit(i32)
@.int_specifier = constant [4 x i8] c"%d\0A\00"
@.str_specifier = constant [4 x i8] c"%s\0A\00"
@.divide_by_zero_error = constant [23 x i8] c"Error division by zero\00"
@.var11 = constant [23 x i8] c"this is recursion test\00"
@.var13 = constant [33 x i8] c"we will calculate factorial num:\00"
@.var24 = constant [34 x i8] c"factorial(2) should be 2. actual:\00"
@.var28 = constant [37 x i8] c"factorial(7) should be 5040. actual:\00"
@.var32 = constant [34 x i8] c"factorial(0) should be 1. actual:\00"
@.var36 = constant [8 x i8] c"OK bye!\00"

define void @printi(i32) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i32 %0)
    ret void
}

define void @print(i8*) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i8* %0)
    ret void
}


define void @divByZero() {
    %spec_ptr = getelementptr [23 x i8], [23 x i8]* @.divide_by_zero_error, i32 0, i32 0
    call void (i8*) @print(i8* %spec_ptr)
    %exitCode = add i32 0, 0
    call void @exit(i32 %exitCode)
    ret void
}

define i32 @var0factorial(i32)
{
    %myArr_0 = alloca [50 x i32]
    %var1 = add i32 %0, 0
    %var2 = add i32 1, 0
    %var3 = icmp sle i32 %var1, %var2
    br i1 %var3, label %label_29, label %label_33
    label_29:
        %var4 = add i32 1, 0
        ret i32 %var4
        br label %label_33
    label_33:
        %var5 = add i32 %0, 0
        %var6 = add i32 1, 0
        %var7 = sub i32 %var5, %var6
        %var8 = call i32 @var0factorial(i32 %var7)
        %var9 = add i32 %0, 0
        %var10 = mul i32 %var8, %var9
        ret i32 %var10
        ret i32 0
}

define void @main()
{
    %myArr_1 = alloca [50 x i32]
        %var12 = getelementptr [23 x i8] , [23 x i8]* @.var11, i32 0, i32 0
        call void (i8*) @print(i8* %var12)
        %var14 = getelementptr [33 x i8] , [33 x i8]* @.var13, i32 0, i32 0
        call void (i8*) @print(i8* %var14)
        %var15 = add i32 2, 0
        %var16 = call i32 @var0factorial(i32 %var15)
        %var17 = getelementptr [50 x i32], [50 x i32]* %myArr_1, i32 0, i32 0
        store i32 %var16, i32* %var17
        %var18 = add i32 7, 0
        %var19 = call i32 @var0factorial(i32 %var18)
        %var20 = getelementptr [50 x i32], [50 x i32]* %myArr_1, i32 0, i32 1
        store i32 %var19, i32* %var20
        %var21 = add i32 0, 0
        %var22 = call i32 @var0factorial(i32 %var21)
        %var23 = getelementptr [50 x i32], [50 x i32]* %myArr_1, i32 0, i32 2
        store i32 %var22, i32* %var23
        %var25 = getelementptr [34 x i8] , [34 x i8]* @.var24, i32 0, i32 0
        call void (i8*) @print(i8* %var25)
        %var26 = getelementptr [50 x i32], [50 x i32]* %myArr_1, i32 0, i32 0
        %var27 = load i32, i32* %var26
        call void @printi(i32 %var27)
        %var29 = getelementptr [37 x i8] , [37 x i8]* @.var28, i32 0, i32 0
        call void (i8*) @print(i8* %var29)
        %var30 = getelementptr [50 x i32], [50 x i32]* %myArr_1, i32 0, i32 1
        %var31 = load i32, i32* %var30
        call void @printi(i32 %var31)
        %var33 = getelementptr [34 x i8] , [34 x i8]* @.var32, i32 0, i32 0
        call void (i8*) @print(i8* %var33)
        %var34 = getelementptr [50 x i32], [50 x i32]* %myArr_1, i32 0, i32 2
        %var35 = load i32, i32* %var34
        call void @printi(i32 %var35)
        %var37 = getelementptr [8 x i8] , [8 x i8]* @.var36, i32 0, i32 0
        call void (i8*) @print(i8* %var37)
        ret void
}

