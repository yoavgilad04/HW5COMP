declare i32 @printf(i8*, ...)
declare void @exit(i32)
@.int_specifier = constant [4 x i8] c"%d\0A\00"
@.str_specifier = constant [4 x i8] c"%s\0A\00"
@.divide_by_zero_error = constant [23 x i8] c"Error division by zero\00"
@.var0 = constant [29 x i8] c"this is the very first test!\00"
@.var2 = constant [43 x i8] c"Here we test basic calculation and storing\00"
@.var4 = constant [19 x i8] c"Calculating 1+2...\00"
@.var10 = constant [16 x i8] c"the result is: \00"
@.var14 = constant [5 x i8] c"Bye!\00"

define void @printi(i32) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i32 %0)
    ret void
}

define void @print(i8*) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i8* %0)
    ret void
}


define void @divByZero() {
    %spec_ptr = getelementptr [23 x i8], [23 x i8]* @.divide_by_zero_error, i32 0, i32 0
    call void (i8*) @print(i8* %spec_ptr)
    %exitCode = add i32 0, 0
    call void @exit(i32 %exitCode)
    ret void
}

define void @main()
{
    %myArr_0 = alloca [50 x i32]
    %var1 = getelementptr [29 x i8] , [29 x i8]* @.var0, i32 0, i32 0
    call void (i8*) @print(i8* %var1)
    %var3 = getelementptr [43 x i8] , [43 x i8]* @.var2, i32 0, i32 0
    call void (i8*) @print(i8* %var3)
    %var5 = getelementptr [19 x i8] , [19 x i8]* @.var4, i32 0, i32 0
    call void (i8*) @print(i8* %var5)
    %var6 = add i32 1, 0
    %var7 = add i32 2, 0
    %var8 = add i32 %var6, %var7
    %var9 = getelementptr [50 x i32], [50 x i32]* %myArr_0, i32 0, i32 0
    store i32 %var8, i32* %var9
    %var11 = getelementptr [16 x i8] , [16 x i8]* @.var10, i32 0, i32 0
    call void (i8*) @print(i8* %var11)
    %var12 = getelementptr [50 x i32], [50 x i32]* %myArr_0, i32 0, i32 0
    %var13 = load i32, i32* %var12
    call void @printi(i32 %var13)
    %var15 = getelementptr [5 x i8] , [5 x i8]* @.var14, i32 0, i32 0
    call void (i8*) @print(i8* %var15)
    ret void
    ret void
}

